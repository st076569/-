#ifndef MANAGERLIB_H
#define MANAGERLIB_H

////////// managerlib ////////////////////////////////////////////////////////
// Автор    : Баталов Семен                                                 //
// Дата     : 28.09.2020                                                    //
// Задача   : Сделать диспетчер задач с применением идеологии "RAII". Ко    //
//            всем методам подписать тип гарантии.                          //
// Описание : Здесь приведено объявление всех составляющих классов          //
//            "задача" и "диспетчер задач".                                 //
//////////////////////////////////////////////////////////////////////////////

////////// Типы гарантий /////////////////////////////////////////////////////
// 0) Нет никаких гарантий [ННГ]                                            //
//      Нет никаких гарантий относительно того, что произойдет, если        //
//      возникнет исключение.                                               //
// 1) Гарантия отсутствия исключений / сбоев [ГОИС]                         //
//      Ни при каких обстоятельствах функция не будет генерировать          //
//      исключения. Функция всегда успешно выполняет свою работу.           //
// 2) Базовая гарантия [БГ]                                                 //
//      При возникновении любого исключения состояние программы             //
//      останется согласованным.                                            //
// 3) Строгая гарантия [СГ]                                                 //
//      Если при выполнении операции возникнет исключение, то               //
//      программа останется том же в состоянии, которое было до             //
//      начала выполнения операции.                                         //
//////////////////////////////////////////////////////////////////////////////

#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <iomanip> 

#include <vector>
#include <ctime>
#include <exception>

namespace bat
{
    const int MAX_IMPORTANCE     = 200;
    const int MAX_EXECUTION_TIME = 300;
    const int MAX_DELAY          = 100;
    const int MAX_STATUS_NUMBER  = 3;
    const int MAX_TASK_NUMBER    = 100;
    const int INIT_TASK_NUMBER   = -1;
    
    ////////// class Task ////////////////////////////////////////////////////
    // Класс, описывающий произвольную задачу.                              //
    //////////////////////////////////////////////////////////////////////////
    
    class Task
    {
        private :
            
            int executionTime_;         // Продолжительность выполнения задачи
            int importance_;            // Важность задачи
            int number_;                // Уникальный номер задачи
            
        public :
            
            // (1) Конструктор [ГОИС]
            Task() noexcept;
            
            // (2) Конструктор [ГОИС]
            Task(const int& newExTime, const int& newImportance) noexcept;
            
            // (3) Конструктор копирования [ГОИС]
            Task(const Task& task) noexcept;
            
            // (4) Перегрузка оператора присваивания [ГОИС]
            Task& operator=(const Task& task) noexcept;
            
            // (5) Установить время выполнения "executionTime_" [ГОИС]
            void setExecutionTime(const int& newExTime) noexcept;
            
            // (6) Установить важность "importance_" [ГОИС]
            void setImportance(const int& newImportance) noexcept;
            
            // (7) Установить уникальный номер "number_" [ГОИС]
            void setNumber(const int& newNumber) noexcept;
            
            // (8) Вернуть время выполнения "executionTime_" [ГОИС]
            int getExecutionTime() const noexcept;
            
            // (9) Вернуть важность "importance_" [ГОИС]
            int getImportance() const noexcept;
            
            // (10) Вернуть уникальный номер "number_" [ГОИС]
            int getNumber() const noexcept;
            
            // (11) Увеличить приоритет на "1"
            void addImportance() noexcept;
            
            // (12) Обнуляет поля [ГОИС]
            void clear() noexcept;
            
            // (13) Деструктор [ГОИС]
            ~Task() noexcept;
    };
    
    ////////// struct TaskTime ///////////////////////////////////////////////
    // Структура, содержащая задачу и время в тактах, когда она поступит в  //
    // диспетчер после прихода предыдущей задачи.                           //
    //////////////////////////////////////////////////////////////////////////
    
    struct TaskTime
    {
        public :
            
            Task task;                  // Задача
            int  delay;                 // Задержка до поступления
            
        public :
            
            // (1) Конструктор [ГОИС]
            TaskTime() noexcept;
            
            // (2) Конструктор копирования [ГОИС]
            TaskTime(const TaskTime& taskTime) noexcept;
            
            // (3) Перегрузка оператора присваивания [ГОИС]
            TaskTime& operator=(const TaskTime& taskTime) noexcept;
            
            // (4) Обнуляет поля [ГОИС]
            void clear() noexcept;
            
            // (5) Деструктор [ГОИС]
            ~TaskTime() noexcept;
    };
    
    ////////// class Manager /////////////////////////////////////////////////
    // Класс, описывающий менеджер задач, который принимает задачи с        //
    // использованием очереди с приоритетом (с увеличением времени ожидания //
    // приоритет задачи увеличивается).                                     //
    // Описание состояний:                                                  //
    //  1) status_ = 0 : нет ошибок                                         //
    //  2) status_ = 1 : допущена ошибка при выделении динамической памяти  //
    //  3) status_ = 2 : было выброшено стандартное исключение              //
    //  4) status_ = 3 : было выброшено неизвестное исключение              //
    //////////////////////////////////////////////////////////////////////////
    
    class Manager
    {
        private :
            
            std::vector<Task> tasks_;   // "Очередь" задач с приоритетом
            int cycleCount_;            // Кол-во тактов до решения задачи
            int curNumber_;             // Уникальный номер исполняемой задачи
            int status_;                // Состояние менеджера
            
        public :
            
            // (1) Конструктор [ГОИС]
            Manager() noexcept;
            
            // (2) Конструктор копирования [ГОИС]
            Manager(const Manager& manager) noexcept;
            
            // (3) Перегрузка оператора присваивания [ГОИС]
            Manager& operator=(const Manager& manager) noexcept;
            
            // (4) Обсчитывает один такт [ГОИС]
            void process() noexcept;
            
            // (5) Добавляет задачу в очередь [ГОИС]
            void push(const Task& task) noexcept;
            
            // (6) Если статус ошибочный (!= 0) [ГОИС]
            bool fail() const noexcept;
            
            // (7) Возвращает код состояния менеджера [ГОИС]
            int getStatus() const noexcept;
            
            // (8) Устанавливает состояние менеджера [ГОИС]
            void setStatus(const int& newStatus) noexcept;
            
            // (9) Вернуть значение номера текущей задачи [ГОИС]
            int getCurrentTaskNum() const noexcept;
            
            // (10) Возвращает "true", если очередь пуста [ГОИС]
            bool isEmpty() const noexcept;
            
            // (11) Обнуляет поля [ГОИС]
            void clear() noexcept;
            
            // (12) Деструктор [ГОИС]
            ~Manager() noexcept;
    };
    
    ////////// void createTasksArray /////////////////////////////////////////
    // Создает массив задач с учетом задержки поступления. Данные           //
    // вводятся случайные. [ГОИС]                                           //
    // Описание состояний:                                                  //
    //  1) error = 0 : нет ошибок                                           //
    //  2) error = 1 : допущена ошибка при выделении динамической памяти    //
    //  3) error = 2 : было выброшено стандартное исключение                //
    //  4) error = 3 : было выброшено неизвестное исключение                //
    //////////////////////////////////////////////////////////////////////////
    
    void createTasksArray(TaskTime** head, const int& size, int& error);
    
    ////////// void printTaskArray ///////////////////////////////////////////
    // Выводит на экран массив задач для диспетчера. [ГОИС]                 //
    //////////////////////////////////////////////////////////////////////////
    
    void printTaskArray(TaskTime* head, const int& size);
    
    ////////// void processTasks /////////////////////////////////////////////
    // Запускает диспетчер задач на созданном массиве.                      //
    // Описание состояний: [ГОИС]                                           //
    //  1) error = 0 : нет ошибок                                           //
    //  2) error = 1 : допущена ошибка при выделении динамической памяти    //
    //  3) error = 2 : было выброшено стандартное исключение                //
    //  4) error = 3 : было выброшено неизвестное исключение                //
    //////////////////////////////////////////////////////////////////////////
    
    void processTasks(TaskTime* head, const int& size, int& error);
}

#endif